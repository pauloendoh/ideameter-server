// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  googleId  String?  @unique
  username  String   @unique
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groups       Group[]
  userGroups   UserGroup[]
  createdTabs  GroupTab[]
  createdIdeas Idea[]
  ideaRatings  IdeaRating[]

  lastOpenedGroupId String?
}

model Group {
  id        String @id @default(cuid())
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userGroups UserGroup[]
  tabs       GroupTab[]
  labels     Label[]
}

model UserGroup {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAdmin Boolean @default(false)

  @@id([groupId, userId])
}

model GroupTab {
  id        String @id @default(cuid())
  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ideas Idea[]
}

model Idea {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subIdeas Idea[]  @relation("IdeaSubIdea")
  parent   Idea?   @relation("IdeaSubIdea", fields: [parentId], references: [id])
  parentId String?

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  tab   GroupTab? @relation(fields: [tabId], references: [id])
  tabId String?

  name        String
  description String

  ideaRatings IdeaRating[]
  labels      Label[]
}

model IdeaRating {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Int?
}

model Label {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  name    String
  bgColor String @default("#db4035")

  ideas Idea[]
}
