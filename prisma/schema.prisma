generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  googleId  String?  @unique
  username  String   @unique
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastOnlineAt DateTime?

  groups       Group[]
  userGroups   UserGroup[]
  createdTabs  GroupTab[]
  createdIdeas Idea[]

  assignedIdeas Idea[]       @relation(name: "assigned")
  ideaRatings   IdeaRating[]
  rteImages     RteImage[]

  highImpactVotes HighImpactVote[]

  lastOpenedGroupId String?

  profile          Profile?
  notifications    Notification[]
  userTokens       UserToken[]
  ideaChanges      IdeaChange[]
  comments         Comment[]
  highlightedIdeas IdeaHighlight[]
  settings         UserSettings?
}

enum GroupRatingInputType {
  dropdown
  numeric
}

model Group {
  id        String  @id @default(cuid())
  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId String?

  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userGroups UserGroup[]
  tabs       GroupTab[]
  labels     Label[]

  imageUrl String?

  minRating           Float                @default(1)
  maxRating           Float                @default(3)
  dropdownValueLabels String[]
  ratingInputType     GroupRatingInputType @default(dropdown)
}

model UserGroup {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAdmin Boolean @default(false)

  @@id([groupId, userId])
}

model GroupTab {
  id        String  @id @default(cuid())
  creator   User?   @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId String?

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ideas Idea[]
}

model Idea {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean @default(false)

  subIdeas Idea[]  @relation("IdeaSubIdea")
  parent   Idea?   @relation("IdeaSubIdea", fields: [parentId], references: [id])
  parentId String?

  waitingIdeas   Idea[] @relation("IdeaWaitingIdea")
  beingWaitedFor Idea[] @relation("IdeaWaitingIdea")

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  tab   GroupTab? @relation(fields: [tabId], references: [id], onDelete: Cascade)
  tabId String?

  name                            String
  description                     String
  isDone                          Boolean   @default(false)
  completedAt                     DateTime?
  onFireSince                     DateTime?
  irrelevantSince                 DateTime?
  ratingsAreEnabled               Boolean   @default(true)
  complexity                      Float     @default(0)
  frequencyRate                   Int?
  improvementRate                 Int?
  rewarding                       Float?
  discomfortZone                  Float?
  hasChangedRewardingOrDiscomfort Boolean   @default(false)

  ideaRatings      IdeaRating[]
  rteImages        RteImage[]
  labels           Label[]
  assignedUsers    User[]           @relation(name: "assigned")
  highImpactVotes  HighImpactVote[]
  changes          IdeaChange[]
  comments         Comment[]
  highlightedIdeas IdeaHighlight[]

  subideaImageUrl String @default("")
}

model IdeaRating {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating       Float?
  ratingBackup Float?

  rewarding Float?

  position Int?
}

model Label {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  name    String
  bgColor String @default("#db4035")

  position Int @default(0)

  ideas Idea[]
}

model HighImpactVote {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, ideaId])
}

model Profile {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  bio        String
  pictureUrl String

  updatedAt DateTime @updatedAt

  @@id([userId])
}

model RteImage {
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  idea   Idea?   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String?

  imageUrl  String   @id
  createdAt DateTime @default(now())
}

model Notification {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  showDot                Boolean @default(true)
  ideaDescriptionMention Json?
}

enum TokenType {
  PASSWORD_RESET
}

model UserToken {
  type   TokenType
  id     String    @id @default(cuid())
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  token String @default(cuid())

  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum IdeaChangeType {
  Description
  Title
}

model IdeaChange {
  id String @id @default(cuid())

  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  changeType IdeaChangeType
  prevText   String
  newText    String
  createdAt  DateTime       @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  targetIdea   Idea?   @relation(fields: [targetIdeaId], references: [id], onDelete: Cascade)
  targetIdeaId String?

  replies         Comment[] @relation("CommentReplies")
  targetComment   Comment?  @relation(name: "CommentReplies", fields: [targetCommentId], references: [id], onDelete: Cascade)
  targetCommentId String?

  text String
}

model IdeaHighlight {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  idea   Idea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSettings {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hiddenTabsIds String[]
}
